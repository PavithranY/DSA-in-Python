🚀 📚 Full Array Roadmap (Basic → Advanced + Algorithms)
📌 Topic/Algorithm	🏆 Level	⭐ Placement Importance
✅ Traversal & Basic Operations	Beginner	⭐⭐
✅ Find Min/Max in Array	Beginner	⭐⭐⭐
✅ Reverse an Array	Beginner	⭐⭐⭐
✅ Rotate Array (Left/Right by K)	Beginner	⭐⭐⭐⭐
✅ Search (Linear Search, Binary Search)	Beginner	⭐⭐⭐⭐
✅ Remove Duplicates from Sorted Array	Intermediate	⭐⭐⭐⭐
✅ Move Zeroes to End	Intermediate	⭐⭐⭐⭐
✅ Kadane’s Algorithm (Max Subarray Sum)	Intermediate	⭐⭐⭐⭐⭐
✅ Moore’s Voting Algorithm (Majority Element)	Intermediate	⭐⭐⭐⭐⭐
✅ Two Pointer Problems (Pair Sum, Reverse Vowels, etc)	Intermediate	⭐⭐⭐⭐⭐
✅ Prefix Sum Problems	Intermediate	⭐⭐⭐⭐⭐
✅ Sliding Window Problems (Fixed & Variable Size)	Intermediate	⭐⭐⭐⭐⭐
✅ Dutch National Flag Algorithm (Sort 0s,1s,2s)	Intermediate	⭐⭐⭐⭐⭐
✅ Find Missing Number (1 to N)	Intermediate	⭐⭐⭐⭐⭐
✅ Find Duplicate Number (1 to N)	Intermediate	⭐⭐⭐⭐
✅ Leaders in Array	Intermediate	⭐⭐⭐⭐
✅ Maximum Product Subarray	Advanced	⭐⭐⭐⭐
✅ Trapping Rainwater	Advanced	⭐⭐⭐⭐⭐
✅ Longest Subarray with Sum K (HashMap)	Advanced	⭐⭐⭐⭐⭐
✅ Subarray with 0 Sum	Advanced	⭐⭐⭐⭐⭐
✅ Maximum of All Subarrays of Size K (Deque)	Advanced	⭐⭐⭐⭐⭐
✅ Rotate Matrix (90 degrees)	Advanced	⭐⭐⭐⭐⭐
✅ Spiral Matrix	Advanced	⭐⭐⭐⭐
✅ Search in Rotated Sorted Array	Advanced	⭐⭐⭐⭐⭐
✅ Median of Two Sorted Arrays	Expert	⭐⭐⭐⭐⭐
✅ Kth Largest/Smallest Element (Heap or QuickSelect)	Advanced	⭐⭐⭐⭐⭐
✅ Count Inversions (Merge Sort Based)	Advanced	⭐⭐⭐⭐⭐

🔥 Key Array Algorithms + Python Codes
✅ 1. Kadane’s Algorithm (Maximum Subarray Sum)
python
Copy
Edit
def kadanes_algorithm(arr):
    max_sum = curr_sum = arr[0]
    for num in arr[1:]:
        curr_sum = max(num, curr_sum + num)
        max_sum = max(max_sum, curr_sum)
    print("Maximum Subarray Sum:", max_sum)
✅ 2. Moore’s Voting Algorithm (Majority Element)
python
Copy
Edit
def majority_element(arr):
    count, candidate = 0, None
    for num in arr:
        if count == 0:
            candidate = num
        count += (1 if num == candidate else -1)
    print("Majority Element (Candidate):", candidate)
✅ 3. Dutch National Flag Algorithm (Sort 0s,1s,2s)
python
Copy
Edit
def dutch_flag_sort(arr):
    low, mid, high = 0, 0, len(arr)-1
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1
    print("Sorted Array:", arr)
✅ 4. Sliding Window (Maximum of All Subarrays of Size K)
python
Copy
Edit
from collections import deque

def max_subarrays(arr, k):
    dq = deque()
    result = []
    for i in range(len(arr)):
        while dq and dq[0] <= i-k:
            dq.popleft()
        while dq and arr[dq[-1]] < arr[i]:
            dq.pop()
        dq.append(i)
        if i >= k-1:
            result.append(arr[dq[0]])
    print("Max of each subarray of size K:", result)
✅ 5. Trapping Rainwater Problem
python
Copy
Edit
def trap_rainwater(height):
    left, right = 0, len(height)-1
    left_max, right_max, water = 0, 0, 0
    while left < right:
        if height[left] < height[right]:
            if height[left] >= left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] >= right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1
    print("Trapped Rainwater:", water)
✅ 6. Find Missing Number (1 to N)
python
Copy
Edit
def find_missing_number(arr, n):
    total = n*(n+1)//2
    print("Missing Number:", total - sum(arr))
✅ 7. Search in Rotated Sorted Array
python
Copy
Edit
def search_rotated(arr, target):
    low, high = 0, len(arr)-1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            print(f"Found {target} at index {mid}")
            return
        if arr[low] <= arr[mid]:
            if arr[low] <= target < arr[mid]:
                high = mid - 1
            else:
                low = mid + 1
        else:
            if arr[mid] < target <= arr[high]:
                low = mid + 1
            else:
                high = mid - 1
    print(f"{target} not found")

🏆 Top 10 Most Asked Array Interview Questions
✅ Find the maximum subarray sum (Kadane’s Algorithm)
✅ Find the duplicate number (Floyd’s Cycle Detection)
✅ Rotate matrix by 90 degrees (In-place rotation)
✅ Trapping Rainwater
✅ Merge overlapping intervals
✅ Maximum of all subarrays of size K (Sliding Window)
✅ Find missing and repeating number
✅ Search in rotated sorted array
✅ Subarray with given sum (Hashmap + Prefix Sum)
✅ Kth smallest element (QuickSelect/Heap)



# 🔥 MASTER ARRAY CODE (Basic → Advanced + Key Algorithms + Top 10 IV Ques)

from collections import deque
import heapq

# ✅ 1. Traversal
def traverse_array(arr):
    print("Array Elements:", arr)

# ✅ 2. Find Min & Max
def find_min_max(arr):
    print("Min:", min(arr), "| Max:", max(arr))

# ✅ 3. Reverse Array
def reverse_array(arr):
    print("Reversed Array:", arr[::-1])

# ✅ 4. Left Rotate Array by K
def left_rotate(arr, k):
    n = len(arr)
    k = k % n
    rotated = arr[k:] + arr[:k]
    print(f"Left Rotated by {k}:", rotated)

# ✅ 5. Right Rotate Array by K
def right_rotate(arr, k):
    n = len(arr)
    k = k % n
    rotated = arr[-k:] + arr[:-k]
    print(f"Right Rotated by {k}:", rotated)

# ✅ 6. Linear Search
def linear_search(arr, target):
    for i, val in enumerate(arr):
        if val == target:
            print(f"{target} found at index {i}")
            return
    print(f"{target} not found")

# ✅ 7. Binary Search (Sorted Array)
def binary_search(arr, target):
    arr.sort()  # Ensure sorted
    low, high = 0, len(arr)-1
    while low <= high:
        mid = (low + high)//2
        if arr[mid] == target:
            print(f"{target} found at index {mid}")
            return
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    print(f"{target} not found")

# ✅ 8. Remove Duplicates (Sorted Array)
def remove_duplicates(arr):
    result = []
    for num in arr:
        if not result or result[-1] != num:
            result.append(num)
    print("Array without duplicates:", result)

# ✅ 9. Move Zeroes to End
def move_zeroes(arr):
    result = [num for num in arr if num != 0] + [0]*arr.count(0)
    print("Array after moving zeroes:", result)

# ✅ 10. Kadane’s Algorithm (Max Subarray Sum)
def kadanes_algorithm(arr):
    max_sum = curr_sum = arr[0]
    for num in arr[1:]:
        curr_sum = max(num, curr_sum + num)
        max_sum = max(max_sum, curr_sum)
    print("Maximum Subarray Sum:", max_sum)

# ✅ 11. Moore’s Voting Algorithm (Majority Element)
def majority_element(arr):
    count, candidate = 0, None
    for num in arr:
        if count == 0:
            candidate = num
        count += (1 if num == candidate else -1)
    print("Majority Element (Candidate):", candidate)

# ✅ 12. Dutch National Flag Algorithm (Sort 0s,1s,2s)
def dutch_flag_sort(arr):
    low = mid = 0
    high = len(arr)-1
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1
    print("Sorted Array:", arr)

# ✅ 13. Trapping Rainwater
def trap_rainwater(height):
    left, right = 0, len(height)-1
    left_max = right_max = water = 0
    while left < right:
        if height[left] < height[right]:
            if height[left] >= left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] >= right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1
    print("Trapped Water:", water)

# ✅ 14. Find Missing Number (1 to N)
def find_missing_number(arr, n):
    total = n*(n+1)//2
    print("Missing Number:", total - sum(arr))

# ✅ 15. Maximum of all Subarrays of size K (Sliding Window)
def max_subarrays(arr, k):
    dq, result = deque(), []
    for i in range(len(arr)):
        while dq and dq[0] <= i-k:
            dq.popleft()
        while dq and arr[dq[-1]] < arr[i]:
            dq.pop()
        dq.append(i)
        if i >= k-1:
            result.append(arr[dq[0]])
    print(f"Max of each subarray of size {k}:", result)

# ✅ 16. Rotate Matrix 90 Degrees
def rotate_matrix(matrix):
    rotated = list(zip(*matrix[::-1]))
    print("Rotated Matrix (90 degrees):")
    for row in rotated:
        print(row)

# ✅ 17. Search in Rotated Sorted Array
def search_rotated(arr, target):
    low, high = 0, len(arr)-1
    while low <= high:
        mid = (low+high)//2
        if arr[mid] == target:
            print(f"{target} found at index {mid}")
            return
        if arr[low] <= arr[mid]:  # Left part sorted
            if arr[low] <= target < arr[mid]:
                high = mid-1
            else:
                low = mid+1
        else:  # Right part sorted
            if arr[mid] < target <= arr[high]:
                low = mid+1
            else:
                high = mid-1
    print(f"{target} not found")

# ✅ 18. Kth Smallest Element (Min Heap)
def kth_smallest(arr, k):
    heapq.heapify(arr)
    for i in range(k-1):
        heapq.heappop(arr)
    print(f"{k}th Smallest Element:", heapq.heappop(arr))

# ✅ MENU
def menu():
    arr = [2, 0, 1, 2, 1, 0, 3, 5, 0, 8, 6]
    matrix = [[1,2,3],[4,5,6],[7,8,9]]
    print("\n🔵 Array Master Menu:")
    print("1. Traverse Array")
    print("2. Find Min & Max")
    print("3. Reverse Array")
    print("4. Left Rotate by K")
    print("5. Right Rotate by K")
    print("6. Linear Search")
    print("7. Binary Search")
    print("8. Remove Duplicates")
    print("9. Move Zeroes to End")
    print("10. Kadane’s Algorithm")
    print("11. Moore’s Voting Algorithm")
    print("12. Dutch National Flag Algorithm")
    print("13. Trapping Rainwater")
    print("14. Find Missing Number")
    print("15. Max of Subarrays of Size K")
    print("16. Rotate Matrix (90 degrees)")
    print("17. Search in Rotated Sorted Array")
    print("18. Kth Smallest Element")
    print("0. Exit")

    while True:
        choice = int(input("\nEnter your choice: "))
        if choice == 0:
            print("Exiting...")
            break
        elif choice == 1:
            traverse_array(arr)
        elif choice == 2:
            find_min_max(arr)
        elif choice == 3:
            reverse_array(arr)
        elif choice == 4:
            k = int(input("Enter K: "))
            left_rotate(arr, k)
        elif choice == 5:
            k = int(input("Enter K: "))
            right_rotate(arr, k)
        elif choice == 6:
            target = int(input("Enter target: "))
            linear_search(arr, target)
        elif choice == 7:
            target = int(input("Enter target: "))
            binary_search(arr, target)
        elif choice == 8:
            arr_sorted = sorted(arr)
            remove_duplicates(arr_sorted)
        elif choice == 9:
            move_zeroes(arr)
        elif choice == 10:
            kadanes_algorithm(arr)
        elif choice == 11:
            majority_element(arr)
        elif choice == 12:
            dutch_flag_sort(arr.copy())
        elif choice == 13:
            trap_rainwater(arr)
        elif choice == 14:
            n = int(input("Enter N (size+1): "))
            arr_missing = list(range(1, n+1))
            arr_missing.remove(n//2)  # remove a number
            find_missing_number(arr_missing, n)
        elif choice == 15:
            k = int(input("Enter K: "))
            max_subarrays(arr, k)
        elif choice == 16:
            rotate_matrix(matrix)
        elif choice == 17:
            target = int(input("Enter target: "))
            search_rotated(arr, target)
        elif choice == 18:
            k = int(input("Enter K: "))
            kth_smallest(arr.copy(), k)
        else:
            print("Invalid choice!")

# 🔥 RUN MASTER ARRAY MENU
menu()
