# ðŸ”¥ Master Sorting Code: Includes Bubble, Selection, Insertion, Merge, Quick, Heap, Dutch Flag, Cyclic, Radix, K-Sorted, Count Inversions

import heapq

# âœ… 1. Bubble Sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    print("Bubble Sorted Array:", arr)

# âœ… 2. Selection Sort
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    print("Selection Sorted Array:", arr)

# âœ… 3. Insertion Sort
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    print("Insertion Sorted Array:", arr)

# âœ… 4. Merge Sort
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
    return arr

# âœ… 5. Quick Sort
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = [x for x in arr[1:] if x <= pivot]
    right = [x for x in arr[1:] if x > pivot]
    return quick_sort(left) + [pivot] + quick_sort(right)

# âœ… 6. Heap Sort
def heapify(arr, n, i):
    largest = i
    l = 2*i + 1
    r = 2*i + 2
    if l < n and arr[l] > arr[largest]:
        largest = l
    if r < n and arr[r] > arr[largest]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    print("Heap Sorted Array:", arr)

# âœ… 7. Dutch National Flag Problem (Sort 0s, 1s, 2s)
def dutch_flag_sort(arr):
    low = mid = 0
    high = len(arr) - 1
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1
    print("Dutch Flag Sorted Array:", arr)

# âœ… 8. Cyclic Sort (For numbers 1 to N)
def cyclic_sort(arr):
    i = 0
    while i < len(arr):
        correct = arr[i] - 1
        if arr[i] != arr[correct]:
            arr[i], arr[correct] = arr[correct], arr[i]
        else:
            i += 1
    print("Cyclic Sorted Array:", arr)

# âœ… 9. Radix Sort
def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1

    for i in range(1, 10):
        count[i] += count[i-1]

    i = n - 1
    while i >= 0:
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(n):
        arr[i] = output[i]

def radix_sort(arr):
    max_num = max(arr)
    exp = 1
    while max_num // exp > 0:
        counting_sort(arr, exp)
        exp *= 10
    print("Radix Sorted Array:", arr)

# âœ… 10. Sort K-sorted Array (Using Min Heap)
def sort_k_sorted_array(arr, k):
    heap = arr[:k+1]
    heapq.heapify(heap)
    result = []
    for i in range(k+1, len(arr)):
        result.append(heapq.heappop(heap))
        heapq.heappush(heap, arr[i])
    while heap:
        result.append(heapq.heappop(heap))
    print("K-sorted Sorted Array:", result)

# âœ… 11. Count Inversions (Using Merge Sort)
def merge_count(arr):
    if len(arr) <= 1:
        return arr, 0
    mid = len(arr) // 2
    left, inv_left = merge_count(arr[:mid])
    right, inv_right = merge_count(arr[mid:])
    merged, inv_merge = merge_and_count(left, right)
    return merged, inv_left + inv_right + inv_merge

def merge_and_count(left, right):
    result, i, j, inv_count = [], 0, 0, 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            inv_count += len(left) - i
            j += 1
    result += left[i:]
    result += right[j:]
    return result, inv_count

# âœ… Menu-Driven Program
def menu():
    arr = [64, 25, 12, 22, 11, 90, 2, 1, 0, 5, 3]
    print("\nðŸ”µ Choose Sorting Operation:")
    print("1. Bubble Sort")
    print("2. Selection Sort")
    print("3. Insertion Sort")
    print("4. Merge Sort")
    print("5. Quick Sort")
    print("6. Heap Sort")
    print("7. Dutch National Flag Problem")
    print("8. Cyclic Sort (1 to N)")
    print("9. Radix Sort")
    print("10. Sort K-Sorted Array")
    print("11. Count Inversions")
    print("0. Exit")

    while True:
        choice = int(input("\nEnter Choice: "))
        if choice == 0:
            break
        elif choice == 1:
            bubble_sort(arr.copy())
        elif choice == 2:
            selection_sort(arr.copy())
        elif choice == 3:
            insertion_sort(arr.copy())
        elif choice == 4:
            sorted_arr = merge_sort(arr.copy())
            print("Merge Sorted Array:", sorted_arr)
        elif choice == 5:
            sorted_arr = quick_sort(arr.copy())
            print("Quick Sorted Array:", sorted_arr)
        elif choice == 6:
            heap_sort(arr.copy())
        elif choice == 7:
            dutch_flag_sort(arr.copy())
        elif choice == 8:
            cyclic_sort(arr.copy())
        elif choice == 9:
            radix_sort(arr.copy())
        elif choice == 10:
            k = int(input("Enter value of k: "))
            sort_k_sorted_array(arr.copy(), k)
        elif choice == 11:
            _, inversions = merge_count(arr.copy())
            print("Number of Inversions:", inversions)
        else:
            print("Invalid Choice")

# ðŸ”¥ Run Menu
menu()
