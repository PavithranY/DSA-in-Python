🏆 📚 Matrix Mastery Roadmap (Python)
📌 Topic	🏆 Level	⭐ Placement Importance
✅ Matrix Creation & Traversal	Beginner	⭐⭐⭐
✅ Row-wise & Column-wise Traversal	Beginner	⭐⭐⭐
✅ Search in a Matrix (Naive)	Beginner	⭐⭐
✅ Search in a Sorted Matrix	Intermediate	⭐⭐⭐⭐
✅ Rotate Matrix by 90 Degrees	Intermediate	⭐⭐⭐⭐
✅ Transpose of a Matrix	Intermediate	⭐⭐⭐⭐
✅ Spiral Order Traversal	Intermediate	⭐⭐⭐⭐⭐
✅ Diagonal Traversals	Intermediate	⭐⭐⭐⭐
✅ Boundary Traversal	Intermediate	⭐⭐⭐
✅ Set Matrix Zeroes (In-place)	Advanced	⭐⭐⭐⭐
✅ Word Search in a Matrix (Backtracking)	Advanced	⭐⭐⭐⭐
✅ Search a Word in 2D Grid	Advanced	⭐⭐⭐⭐
✅ Flood Fill Algorithm (DFS)	Advanced	⭐⭐⭐⭐⭐
✅ Island Counting (Number of Islands)	Advanced	⭐⭐⭐⭐⭐
✅ Snake and Ladder (BFS on Matrix)	Advanced	⭐⭐⭐
✅ Minimum Path Sum	Advanced (DP)	⭐⭐⭐⭐
✅ Unique Paths in Grid	Advanced (DP)	⭐⭐⭐⭐
✅ Maximal Rectangle	Expert	⭐⭐⭐⭐⭐
✅ Sudoku Solver (Backtracking)	Expert	⭐⭐⭐⭐⭐
✅ Rat in a Maze	Expert	⭐⭐⭐⭐⭐

🚀 🎯 Key Matrix Algorithms
✅ Matrix Transpose (swap rows & cols)
✅ Rotate Matrix by 90° (in-place)
✅ Spiral Traversal
✅ Flood Fill Algorithm (DFS/BFS)
✅ Word Search (Backtracking)
✅ Kadane’s Algorithm for 2D matrix
✅ Dynamic Programming on Grids (Unique Paths, Min Path Sum)
✅ Disjoint Set Union (DSU) for islands

🎯 💼 Top 15 Matrix Interview Questions
🔥 Question	⭐ Asked In
✅ Rotate a Matrix 90 degrees	Amazon, Microsoft
✅ Search in a sorted 2D matrix	TCS, Wipro, Infosys
✅ Spiral Order Traversal	Google, Amazon
✅ Set Matrix Zeroes	FAANG, Product Companies
✅ Word Search in Grid	Amazon, FAANG
✅ Number of Islands	Meta, Microsoft
✅ Sudoku Solver	Google, Cognizant
✅ Transpose Matrix	TCS, Capgemini
✅ Boundary Traversal	Infosys, Wipro
✅ Unique Paths in Grid	Amazon, FAANG
✅ Flood Fill	FAANG, Competitive Coding
✅ Minimum Path Sum	Infosys, Oracle
✅ Snake and Ladder in Matrix	Cognizant, Capgemini
✅ Maximal Rectangle	FAANG
✅ Rat in a Maze	TCS, Infosys


# ===================== 🏆 MATRIX MASTERY ===================== #
# ✅ All Basics → Advanced → FAANG Level Matrix Problems
# ✅ Outputs in comments
# ============================================================= #

# ✅ 1. Matrix Creation & Traversal
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]
for row in matrix:
    for val in row:
        print(val, end=" ")
    print()
# ➡️ 1 2 3
#     4 5 6
#     7 8 9

# ✅ 2. Row-wise & Column-wise Traversal
print([row for row in matrix])  # ➡️ Row-wise
print([[row[i] for row in matrix] for i in range(len(matrix[0]))])  # ➡️ Column-wise

# ✅ 3. Search in a Matrix (Naive)
def search_matrix_naive(matrix, target):
    for row in matrix:
        for val in row:
            if val == target:
                return True
    return False
print(search_matrix_naive(matrix, 5))  # ➡️ True

# ✅ 4. Search in a Sorted Matrix (Efficient)
def search_sorted_matrix(matrix, target):
    rows, cols = len(matrix), len(matrix[0])
    r, c = 0, cols-1
    while r < rows and c >= 0:
        if matrix[r][c] == target:
            return True
        elif matrix[r][c] > target:
            c -= 1
        else:
            r += 1
    return False
print(search_sorted_matrix(matrix, 6))  # ➡️ True

# ✅ 5. Rotate Matrix by 90 Degrees (In-place)
def rotate_matrix(matrix):
    n = len(matrix)
    for i in range(n):
        for j in range(i, n):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]  # Transpose
    for row in matrix:
        row.reverse()  # Reverse each row
rotate_matrix(matrix)
print(matrix)
# ➡️ [[7,4,1],[8,5,2],[9,6,3]]

# ✅ 6. Transpose of a Matrix
def transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]
print(transpose([[1,2,3],[4,5,6],[7,8,9]]))
# ➡️ [[1,4,7],[2,5,8],[3,6,9]]

# ✅ 7. Spiral Order Traversal
def spiral_traversal(matrix):
    res = []
    top, bottom, left, right = 0, len(matrix)-1, 0, len(matrix[0])-1
    while top <= bottom and left <= right:
        for i in range(left, right+1):
            res.append(matrix[top][i])
        top += 1
        for i in range(top, bottom+1):
            res.append(matrix[i][right])
        right -= 1
        if top <= bottom:
            for i in range(right, left-1, -1):
                res.append(matrix[bottom][i])
            bottom -= 1
        if left <= right:
            for i in range(bottom, top-1, -1):
                res.append(matrix[i][left])
            left += 1
    return res
print(spiral_traversal([[1,2,3],[4,5,6],[7,8,9]]))
# ➡️ [1,2,3,6,9,8,7,4,5]

# ✅ 8. Diagonal Traversals
def diagonal_traversal(matrix):
    res = []
    for d in range(len(matrix)+len(matrix[0])-1):
        for i in range(len(matrix)):
            j = d-i
            if 0 <= j < len(matrix[0]):
                res.append(matrix[i][j])
    return res
print(diagonal_traversal([[1,2,3],[4,5,6],[7,8,9]]))
# ➡️ [1,2,4,3,5,7,6,8,9]

# ✅ 9. Boundary Traversal
def boundary_traversal(matrix):
    res = []
    rows, cols = len(matrix), len(matrix[0])
    for i in range(cols): res.append(matrix[0][i])               # Top row
    for i in range(1, rows): res.append(matrix[i][cols-1])      # Right col
    if rows > 1:
        for i in range(cols-2, -1, -1): res.append(matrix[rows-1][i])  # Bottom row
    if cols > 1:
        for i in range(rows-2, 0, -1): res.append(matrix[i][0]) # Left col
    return res
print(boundary_traversal([[1,2,3],[4,5,6],[7,8,9]]))
# ➡️ [1,2,3,6,9,8,7,4]

# ✅ 10. Set Matrix Zeroes (In-place)
def set_zeroes(matrix):
    rows, cols = len(matrix), len(matrix[0])
    row_set, col_set = set(), set()
    for r in range(rows):
        for c in range(cols):
            if matrix[r][c] == 0:
                row_set.add(r)
                col_set.add(c)
    for r in row_set:
        for c in range(cols):
            matrix[r][c] = 0
    for c in col_set:
        for r in range(rows):
            matrix[r][c] = 0
m = [[1,2,3],[4,0,6],[7,8,9]]
set_zeroes(m)
print(m)
# ➡️ [[1,0,3],[0,0,0],[7,0,9]]

# ✅ 11. Word Search in Matrix (Backtracking)
def exist(board, word):
    rows, cols = len(board), len(board[0])
    def dfs(r, c, i):
        if i == len(word): return True
        if r<0 or c<0 or r>=rows or c>=cols or board[r][c] != word[i]:
            return False
        temp, board[r][c] = board[r][c], "#"
        res = (dfs(r+1,c,i+1) or dfs(r-1,c,i+1) or dfs(r,c+1,i+1) or dfs(r,c-1,i+1))
        board[r][c] = temp
        return res
    for r in range(rows):
        for c in range(cols):
            if dfs(r,c,0): return True
    return False
print(exist([['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], "ABCCED"))
# ➡️ True

# ✅ 12. Flood Fill Algorithm (DFS)
def flood_fill(image, sr, sc, color):
    rows, cols, original = len(image), len(image[0]), image[sr][sc]
    def dfs(r, c):
        if r<0 or c<0 or r>=rows or c>=cols or image[r][c] != original or image[r][c] == color:
            return
        image[r][c] = color
        dfs(r+1,c), dfs(r-1,c), dfs(r,c+1), dfs(r,c-1)
    dfs(sr, sc)
    return image
print(flood_fill([[1,1,1],[1,1,0],[1,0,1]], 1, 1, 2))
# ➡️ [[2,2,2],[2,2,0],[2,0,1]]

# ✅ 13. Number of Islands
def num_islands(grid):
    rows, cols, count = len(grid), len(grid[0]), 0
    def dfs(r, c):
        if r<0 or c<0 or r>=rows or c>=cols or grid[r][c] != '1':
            return
        grid[r][c] = '0'
        dfs(r+1,c), dfs(r-1,c), dfs(r,c+1), dfs(r,c-1)
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1':
                dfs(r, c)
                count += 1
    return count
print(num_islands([["1","1","0","0","0"],
                   ["1","1","0","0","0"],
                   ["0","0","1","0","0"],
                   ["0","0","0","1","1"]]))
# ➡️ 3

# ✅ 14. Sudoku Solver
# (Already covered in recursion master file)

# ✅ 15. Rat in a Maze
# (Already covered in recursion master file)

# ✅ 16. Unique Paths (DP)
def unique_paths(m, n):
    dp = [[1]*n for _ in range(m)]
    for r in range(1, m):
        for c in range(1, n):
            dp[r][c] = dp[r-1][c]+dp[r][c-1]
    return dp[-1][-1]
print(unique_paths(3, 3))  # ➡️ 6

# ✅ 17. Minimum Path Sum (DP)
def min_path_sum(grid):
    rows, cols = len(grid), len(grid[0])
    for r in range(1, rows):
        grid[r][0] += grid[r-1][0]
    for c in range(1, cols):
        grid[0][c] += grid[0][c-1]
    for r in range(1, rows):
        for c in range(1, cols):
            grid[r][c] += min(grid[r-1][c], grid[r][c-1])
    return grid[-1][-1]
print(min_path_sum([[1,3,1],[1,5,1],[4,2,1]]))  # ➡️ 7
