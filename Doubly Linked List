# Node class for Doubly Linked List
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

# Doubly Linked List class
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    # âœ… Traverse forward
    def traverse_forward(self):
        temp = self.head
        print("Forward Traversal:", end=" ")
        while temp:
            print(temp.data, end=" <-> ")
            last = temp  # Save last node for backward traversal
            temp = temp.next
        print("None")

    # âœ… Traverse backward
    def traverse_backward(self):
        temp = self.head
        if not temp:
            print("List is empty")
            return
        # Go to last node
        while temp.next:
            temp = temp.next
        print("Backward Traversal:", end=" ")
        while temp:
            print(temp.data, end=" <-> ")
            temp = temp.prev
        print("None")

    # âœ… Insert at beginning
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        if self.head:
            self.head.prev = new_node
        self.head = new_node

    # âœ… Insert at end
    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node
        new_node.prev = temp

    # âœ… Insert at a specific position
    def insert_at_position(self, data, position):
        if position == 0:
            self.insert_at_beginning(data)
            return
        new_node = Node(data)
        temp = self.head
        for _ in range(position - 1):
            if not temp:
                print("Position out of bounds")
                return
            temp = temp.next
        if not temp:
            print("Position out of bounds")
            return
        new_node.next = temp.next
        if temp.next:
            temp.next.prev = new_node
        temp.next = new_node
        new_node.prev = temp

    # âœ… Delete at beginning
    def delete_at_beginning(self):
        if not self.head:
            return
        self.head = self.head.next
        if self.head:
            self.head.prev = None

    # âœ… Delete at end
    def delete_at_end(self):
        if not self.head:
            return
        temp = self.head
        if not temp.next:  # Only one node
            self.head = None
            return
        while temp.next:
            temp = temp.next
        temp.prev.next = None

    # âœ… Delete at a specific position
    def delete_at_position(self, position):
        if not self.head:
            return
        if position == 0:
            self.delete_at_beginning()
            return
        temp = self.head
        for _ in range(position):
            if not temp:
                print("Position out of bounds")
                return
            temp = temp.next
        if temp:
            if temp.next:
                temp.next.prev = temp.prev
            if temp.prev:
                temp.prev.next = temp.next

    # âœ… Search for a value
    def search(self, key):
        temp = self.head
        position = 0
        while temp:
            if temp.data == key:
                print(f"Value {key} found at position {position}")
                return True
            temp = temp.next
            position += 1
        print(f"Value {key} not found")
        return False

    # âœ… Reverse the doubly linked list
    def reverse(self):
        temp = None
        current = self.head
        while current:
            temp = current.prev
            current.prev = current.next
            current.next = temp
            current = current.prev
        if temp:
            self.head = temp.prev
        print("Doubly Linked List Reversed")

    # âœ… Find length of DLL
    def find_length(self):
        count = 0
        temp = self.head
        while temp:
            count += 1
            temp = temp.next
        print("Length of Doubly Linked List:", count)

    # âœ… Find middle node
    def find_middle(self):
        slow = self.head
        fast = self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        if slow:
            print("Middle Node:", slow.data)

    # âœ… Swap two nodes (by values)
    def swap_nodes(self, val1, val2):
        if val1 == val2:
            return
        node1 = node2 = self.head
        while node1 and node1.data != val1:
            node1 = node1.next
        while node2 and node2.data != val2:
            node2 = node2.next
        if not node1 or not node2:
            print("Swap not possible: one or both values not found")
            return
        # Swap data
        node1.data, node2.data = node2.data, node1.data
        print(f"Nodes {val1} and {val2} swapped")

    # âœ… Sort the DLL (Bubble Sort)
    def sort(self):
        if not self.head:
            return
        swapped = True
        while swapped:
            swapped = False
            temp = self.head
            while temp.next:
                if temp.data > temp.next.data:
                    temp.data, temp.next.data = temp.next.data, temp.data
                    swapped = True
                temp = temp.next
        print("Doubly Linked List Sorted")

    # âœ… Check if DLL is palindrome
    def is_palindrome(self):
        left = self.head
        right = self.head
        if not right:
            print("List is Empty")
            return
        while right.next:
            right = right.next
        while left != right and left.prev != right:
            if left.data != right.data:
                print("Doubly Linked List is NOT a Palindrome")
                return
            left = left.next
            right = right.prev
        print("Doubly Linked List is a Palindrome")

# ðŸ”¥ Example usage:
dll = DoublyLinkedList()
dll.insert_at_end(1)
dll.insert_at_end(2)
dll.insert_at_end(3)
dll.insert_at_end(2)
dll.insert_at_end(1)

dll.traverse_forward()
dll.traverse_backward()

dll.reverse()
dll.traverse_forward()

dll.find_length()
dll.find_middle()
dll.is_palindrome()
dll.sort()
dll.traverse_forward()
dll.search(3)
dll.swap_nodes(1, 3)
dll.traverse_forward()
